#!/usr/bin/perl
use threads;
use FileHandle;
use File::Copy;

$cfg_config = "/etc/check_mk/mrpe_check_ping.cfg";
if (! -x "/tmp/mrpe") {
	mkdir("/tmp/mrpe");
}

# Open config file 
open (CFG, "cat $cfg_config |") or die "Can't open config '$cfg_config' file\n";

# Loop through config file's lines
$counter = 1;
while ( <CFG> ) {
	# Clear unneaded spaces
	chomp;
	s/^\s+|\s+$//g;
	
	# Extract name from line
	@parts = split /\s+/, $_;
	$name = shift @parts;
	$ping_command = join ' ', @parts;
	
	# Create a new thread
	$thread[$counter] = threads->new(\&ping_thread, $ping_command, $counter, $name);
	
	# Debug
	print "Started '$name'\n";
	
	$counter++;
}

# Debug
print "All threads started\n";

# Waiting for all threads to finish
$run = 1;
while($run) {
	@running = threads->list(threads::running);
	$nrunning = @running;
	if ($nrunning < 1) {
		$run = 0;
	}
	sleep(1);
}

# Thread subroutine
sub ping_thread {
	# Collect arguments
	my @data = @_;
	$ping_command = $data[0];
	$handle = PING."$data[1]";
	$name = $data[2];
	
	# Open temp file for output
	open(TMP, ">/tmp/mrpe/$name.tmp") or die "Can't open output temp '/tmp/mrpe/$name.tmp' file\n";
	
	# Start ping command 
	open($handle, "$ping_command 2>&1 |") or die "Can't start ping process!\n";
	$oldh = select($handle);
	$| = 1;
	select($oldh);

	while ( <$handle> ) {
		chomp;
		s/^\s+|\s+$//;
		
		@strs = split /\s+/, $_;
		$status = 0;
		if (@strs[1] eq "WARNING") { $status = 1; }
		elsif (@strs[1] eq "CRITICAL") { $status = 2; }
		elsif (@strs[1] eq "UNKNOWN") { $status = 3; }
		
		print TMP "<<<mrpe>>>\n";
		print TMP "(check_ping) $name $status $_\n";
		print STDOUT "(check_ping) $status $_\n";
	}
	close(PING);
	close(TMP);
	copy("/tmp/mrpe/$name.tmp", "/tmp/mrpe/$name.out") or die "Can't copy tmp to out file\n";
}

# Debug
print "Finished\n";

close (CFG);
